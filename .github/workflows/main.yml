
on: 
  push

name: Click here to see job results 

jobs:          
  build_linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
         target:
         - x86_64-unknown-linux-gnu	
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            f = open('Cargo.toml', 'w')
            f.writelines('[workspace]\n')
            f.writelines('members = [\n')
            f.writelines('	"mapper",\n')
            f.writelines('	"decider",\n')
            f.writelines('	"attacker",\n')
            f.writelines(']\n')
            f.writelines('[profile.release]\n')
            f.writelines('opt-level = 3')
            f.close()
      - name: musl-tools for ring
        run: |
          sudo apt install musl-tools
          sudo apt-get install build-essential
          
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{matrix.target}}
          override: true
          
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - uses: actions-rs/cargo@v1
        with:
           use-cross: false
           command: build
           args: --release --target=${{matrix.target}}
      - name: Prep_Bootstrap
        run: |
          cp ./target/x86_64-unknown-linux-musl/release/bootstrap ./bootstrap
          zip ${{ env.FUNCTION }} bootstrap
#       - name: uploading to aws
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: eu-central-1
#           AWS_DEFAULT_OUTPUT: json
#         run: |
#           aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile CICD_User
#           aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile CICD_User
#           aws configure set default.region ${{ env.AWS_DEFAULT_REGION }} --profile CICD_User
#           aws configure set output ${{ env.AWS_DEFAULT_OUTPUT }} --profile CICD_User
#           aws lambda update-function-code --function-name ${{ env.FUNCTION }} --zip-file fileb://./${{ env.FUNCTION }}.zip --profile CICD_User
#           echo "SLACK_FOOTER=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Click here to go to the job logs>" >> $GITHUB_ENV
#       - name: Slack Notification on Failure
#         if: ${{ failure() }}
#         uses: rtCamp/action-slack-notify@v2.2.0
#         env:
#           SLACK_CHANNEL: git
#           SLACK_WEBHOOK: ${{ secrets.ACTION_MONITORING_SLACK }}
#           SLACK_COLOR: '#FF0000'
#           SLACK_ICON: ':robot:'
#           SLACK_TITLE: 'Job failed :x:'
#           SLACK_LINK_NAMES: true
#           SLACK_MESSAGE: 'Pull request submitted :rocket:'
          
#       - name: Slack Notification on Success
#         if: ${{ success() }}
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_CHANNEL: git
#           SLACK_WEBHOOK: ${{ secrets.ACTION_MONITORING_SLACK }}
#           SLACK_COLOR: '#008000'
#           SLACK_ICON: ':robot:'
#           SLACK_TITLE: 'Job finished successfully :v:'
#           SLACK_LINK_NAMES: true
#           SLACK_MESSAGE: 'Pull request submitted :rocket:' 
  build_mac:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
         target:
         - x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
        with:
          script: |
            f = open('Cargo.toml', 'w')
            f.writelines('[workspace]\n')
            f.writelines('members = [\n')
            f.writelines('	"mapper",\n')
            f.writelines('	"decider",\n')
            f.writelines('	"attacker",\n')
            f.writelines(']\n')
            f.writelines('[profile.release]\n')
            f.writelines('opt-level = 3')
            f.close()
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{matrix.target}}
          override: true
  
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - uses: actions-rs/cargo@v1
        with:
           use-cross: false
           command: build
           args: --release --target=${{matrix.target}}
#       - name: uploading to aws
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: eu-central-1
#           AWS_DEFAULT_OUTPUT: json
#         run: |
#           aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile CICD_User
#           aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile CICD_User
#           aws configure set default.region ${{ env.AWS_DEFAULT_REGION }} --profile CICD_User
#           aws configure set output ${{ env.AWS_DEFAULT_OUTPUT }} --profile CICD_User
#           aws lambda update-function-code --function-name ${{ env.FUNCTION }} --zip-file fileb://./${{ env.FUNCTION }}.zip --profile CICD_User
#           echo "SLACK_FOOTER=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Click here to go to the job logs>" >> $GITHUB_ENV
#       - name: Slack Notification on Failure
#         if: ${{ failure() }}
#         uses: rtCamp/action-slack-notify@v2.2.0
#         env:
#           SLACK_CHANNEL: git
#           SLACK_WEBHOOK: ${{ secrets.ACTION_MONITORING_SLACK }}
#           SLACK_COLOR: '#FF0000'
#           SLACK_ICON: ':robot:'
#           SLACK_TITLE: 'Job failed :x:'
#           SLACK_LINK_NAMES: true
#           SLACK_MESSAGE: 'Pull request submitted :rocket:'
          
#       - name: Slack Notification on Success
#         if: ${{ success() }}
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_CHANNEL: git
#           SLACK_WEBHOOK: ${{ secrets.ACTION_MONITORING_SLACK }}
#           SLACK_COLOR: '#008000'
#           SLACK_ICON: ':robot:'
#           SLACK_TITLE: 'Job finished successfully :v:'
#           SLACK_LINK_NAMES: true
#           SLACK_MESSAGE: 'Pull request submitted :rocket:' 
